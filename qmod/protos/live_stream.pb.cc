// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: live_stream.proto

#include "live_stream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR Quaternion::Quaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;
PROTOBUF_CONSTEXPR Transform::Transform(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;
PROTOBUF_CONSTEXPR UpdatePosition::UpdatePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headtransform_)*/nullptr
  , /*decltype(_impl_.lefttransform_)*/nullptr
  , /*decltype(_impl_.righttransform_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.songtime_)*/0} {}
struct UpdatePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePositionDefaultTypeInternal() {}
  union {
    UpdatePosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePositionDefaultTypeInternal _UpdatePosition_default_instance_;
PROTOBUF_CONSTEXPR ScoreUpdate::ScoreUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newscores_)*/{}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.combo_)*/0
  , /*decltype(_impl_.misses_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScoreUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoreUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoreUpdateDefaultTypeInternal() {}
  union {
    ScoreUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoreUpdateDefaultTypeInternal _ScoreUpdate_default_instance_;
PROTOBUF_CONSTEXPR StartBeatmap::StartBeatmap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.levelid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.characteristic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.difficulty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartBeatmapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartBeatmapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartBeatmapDefaultTypeInternal() {}
  union {
    StartBeatmap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartBeatmapDefaultTypeInternal _StartBeatmap_default_instance_;
PROTOBUF_CONSTEXPR StartBeatmapFailure::StartBeatmapFailure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartBeatmapFailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartBeatmapFailureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartBeatmapFailureDefaultTypeInternal() {}
  union {
    StartBeatmapFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartBeatmapFailureDefaultTypeInternal _StartBeatmapFailure_default_instance_;
PROTOBUF_CONSTEXPR ReadyUp::ReadyUp(
    ::_pbi::ConstantInitialized) {}
struct ReadyUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadyUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadyUpDefaultTypeInternal() {}
  union {
    ReadyUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadyUpDefaultTypeInternal _ReadyUp_default_instance_;
PROTOBUF_CONSTEXPR StartMap::StartMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.songtime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartMapDefaultTypeInternal() {}
  union {
    StartMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartMapDefaultTypeInternal _StartMap_default_instance_;
PROTOBUF_CONSTEXPR ExitMap::ExitMap(
    ::_pbi::ConstantInitialized) {}
struct ExitMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExitMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExitMapDefaultTypeInternal() {}
  union {
    ExitMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExitMapDefaultTypeInternal _ExitMap_default_instance_;
PROTOBUF_CONSTEXPR PauseMap::PauseMap(
    ::_pbi::ConstantInitialized) {}
struct PauseMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseMapDefaultTypeInternal() {}
  union {
    PauseMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseMapDefaultTypeInternal _PauseMap_default_instance_;
PROTOBUF_CONSTEXPR PacketWrapper::PacketWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queryresultid_)*/uint64_t{0u}
  , /*decltype(_impl_.Packet_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketWrapperDefaultTypeInternal() {}
  union {
    PacketWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketWrapperDefaultTypeInternal _PacketWrapper_default_instance_;
static ::_pb::Metadata file_level_metadata_live_5fstream_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_live_5fstream_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_live_5fstream_2eproto = nullptr;

const uint32_t TableStruct_live_5fstream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Quaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Quaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Quaternion, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Quaternion, _impl_.w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Transform, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Transform, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::UpdatePosition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::UpdatePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UpdatePosition, _impl_.headtransform_),
  PROTOBUF_FIELD_OFFSET(::UpdatePosition, _impl_.lefttransform_),
  PROTOBUF_FIELD_OFFSET(::UpdatePosition, _impl_.righttransform_),
  PROTOBUF_FIELD_OFFSET(::UpdatePosition, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::UpdatePosition, _impl_.songtime_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ScoreUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ScoreUpdate, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::ScoreUpdate, _impl_.combo_),
  PROTOBUF_FIELD_OFFSET(::ScoreUpdate, _impl_.newscores_),
  PROTOBUF_FIELD_OFFSET(::ScoreUpdate, _impl_.misses_),
  PROTOBUF_FIELD_OFFSET(::ScoreUpdate, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartBeatmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartBeatmap, _impl_.levelid_),
  PROTOBUF_FIELD_OFFSET(::StartBeatmap, _impl_.characteristic_),
  PROTOBUF_FIELD_OFFSET(::StartBeatmap, _impl_.difficulty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartBeatmapFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartBeatmapFailure, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReadyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartMap, _impl_.songtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExitMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PauseMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PacketWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PacketWrapper, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PacketWrapper, _impl_.queryresultid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PacketWrapper, _impl_.Packet_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Vector3)},
  { 9, -1, -1, sizeof(::Quaternion)},
  { 19, -1, -1, sizeof(::Transform)},
  { 27, 38, -1, sizeof(::UpdatePosition)},
  { 43, -1, -1, sizeof(::ScoreUpdate)},
  { 54, -1, -1, sizeof(::StartBeatmap)},
  { 63, -1, -1, sizeof(::StartBeatmapFailure)},
  { 70, -1, -1, sizeof(::ReadyUp)},
  { 76, -1, -1, sizeof(::StartMap)},
  { 83, -1, -1, sizeof(::ExitMap)},
  { 89, -1, -1, sizeof(::PauseMap)},
  { 95, -1, -1, sizeof(::PacketWrapper)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Vector3_default_instance_._instance,
  &::_Quaternion_default_instance_._instance,
  &::_Transform_default_instance_._instance,
  &::_UpdatePosition_default_instance_._instance,
  &::_ScoreUpdate_default_instance_._instance,
  &::_StartBeatmap_default_instance_._instance,
  &::_StartBeatmapFailure_default_instance_._instance,
  &::_ReadyUp_default_instance_._instance,
  &::_StartMap_default_instance_._instance,
  &::_ExitMap_default_instance_._instance,
  &::_PauseMap_default_instance_._instance,
  &::_PacketWrapper_default_instance_._instance,
};

const char descriptor_table_protodef_live_5fstream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021live_stream.proto\032\037google/protobuf/tim"
  "estamp.proto\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030"
  "\002 \001(\002\022\t\n\001z\030\003 \001(\002\"8\n\nQuaternion\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"F\n\tTr"
  "ansform\022\032\n\010position\030\001 \001(\0132\010.Vector3\022\035\n\010r"
  "otation\030\002 \001(\0132\013.Quaternion\"\374\001\n\016UpdatePos"
  "ition\022&\n\rheadTransform\030\001 \001(\0132\n.Transform"
  "H\000\210\001\001\022&\n\rleftTransform\030\002 \001(\0132\n.Transform"
  "H\001\210\001\001\022\'\n\016rightTransform\030\003 \001(\0132\n.Transfor"
  "mH\002\210\001\001\022(\n\004time\030\004 \001(\0132\032.google.protobuf.T"
  "imestamp\022\020\n\010songTime\030\005 \001(\002B\020\n\016_headTrans"
  "formB\020\n\016_leftTransformB\021\n\017_rightTransfor"
  "m\"x\n\013ScoreUpdate\022\r\n\005score\030\001 \001(\002\022\r\n\005combo"
  "\030\002 \001(\002\022\021\n\tnewScores\030\003 \003(\002\022\016\n\006misses\030\004 \001("
  "\002\022(\n\004time\030\005 \001(\0132\032.google.protobuf.Timest"
  "amp\"K\n\014StartBeatmap\022\017\n\007levelId\030\001 \001(\t\022\026\n\016"
  "characteristic\030\002 \001(\t\022\022\n\ndifficulty\030\003 \001(\005"
  "\"$\n\023StartBeatmapFailure\022\r\n\005error\030\001 \001(\t\"\t"
  "\n\007ReadyUp\"\034\n\010StartMap\022\020\n\010songTime\030\001 \001(\002\""
  "\t\n\007ExitMap\"\n\n\010PauseMap\"\324\002\n\rPacketWrapper"
  "\022\025\n\rqueryResultId\030\001 \001(\004\022)\n\016updatePositio"
  "n\030\002 \001(\0132\017.UpdatePositionH\000\022%\n\014startBeatm"
  "ap\030\003 \001(\0132\r.StartBeatmapH\000\0223\n\023startBeatma"
  "pFailure\030\004 \001(\0132\024.StartBeatmapFailureH\000\022\033"
  "\n\007readyUp\030\005 \001(\0132\010.ReadyUpH\000\022\035\n\010startMap\030"
  "\006 \001(\0132\t.StartMapH\000\022\033\n\007exitMap\030\007 \001(\0132\010.Ex"
  "itMapH\000\022\035\n\010pauseMap\030\010 \001(\0132\t.PauseMapH\000\022#"
  "\n\013scoreUpdate\030\t \001(\0132\014.ScoreUpdateH\000B\010\n\006P"
  "acketB\031\252\002\026LiveStreamQuest.Protosb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_live_5fstream_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_live_5fstream_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_live_5fstream_2eproto = {
    false, false, 1160, descriptor_table_protodef_live_5fstream_2eproto,
    "live_stream.proto",
    &descriptor_table_live_5fstream_2eproto_once, descriptor_table_live_5fstream_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_live_5fstream_2eproto::offsets,
    file_level_metadata_live_5fstream_2eproto, file_level_enum_descriptors_live_5fstream_2eproto,
    file_level_service_descriptors_live_5fstream_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_live_5fstream_2eproto_getter() {
  return &descriptor_table_live_5fstream_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_live_5fstream_2eproto(&descriptor_table_live_5fstream_2eproto);

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[0]);
}

// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:Quaternion)
}

inline void Quaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:Quaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:Quaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Quaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion::GetClassData() const { return &_class_data_; }


void Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Quaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)
      + sizeof(Quaternion::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[1]);
}

// ===================================================================

class Transform::_Internal {
 public:
  static const ::Vector3& position(const Transform* msg);
  static const ::Quaternion& rotation(const Transform* msg);
};

const ::Vector3&
Transform::_Internal::position(const Transform* msg) {
  return *msg->_impl_.position_;
}
const ::Quaternion&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->_impl_.rotation_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transform* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Quaternion(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:Transform)
}

inline void Transform::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:Transform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void Transform::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:Transform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Quaternion rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform::GetClassData() const { return &_class_data_; }


void Transform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transform*>(&to_msg);
  auto& from = static_cast<const Transform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Transform)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Quaternion::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)
      + sizeof(Transform::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[2]);
}

// ===================================================================

class UpdatePosition::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdatePosition>()._impl_._has_bits_);
  static const ::Transform& headtransform(const UpdatePosition* msg);
  static void set_has_headtransform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Transform& lefttransform(const UpdatePosition* msg);
  static void set_has_lefttransform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Transform& righttransform(const UpdatePosition* msg);
  static void set_has_righttransform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const UpdatePosition* msg);
};

const ::Transform&
UpdatePosition::_Internal::headtransform(const UpdatePosition* msg) {
  return *msg->_impl_.headtransform_;
}
const ::Transform&
UpdatePosition::_Internal::lefttransform(const UpdatePosition* msg) {
  return *msg->_impl_.lefttransform_;
}
const ::Transform&
UpdatePosition::_Internal::righttransform(const UpdatePosition* msg) {
  return *msg->_impl_.righttransform_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UpdatePosition::_Internal::time(const UpdatePosition* msg) {
  return *msg->_impl_.time_;
}
void UpdatePosition::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
UpdatePosition::UpdatePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UpdatePosition)
}
UpdatePosition::UpdatePosition(const UpdatePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headtransform_){nullptr}
    , decltype(_impl_.lefttransform_){nullptr}
    , decltype(_impl_.righttransform_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.songtime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_headtransform()) {
    _this->_impl_.headtransform_ = new ::Transform(*from._impl_.headtransform_);
  }
  if (from._internal_has_lefttransform()) {
    _this->_impl_.lefttransform_ = new ::Transform(*from._impl_.lefttransform_);
  }
  if (from._internal_has_righttransform()) {
    _this->_impl_.righttransform_ = new ::Transform(*from._impl_.righttransform_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.songtime_ = from._impl_.songtime_;
  // @@protoc_insertion_point(copy_constructor:UpdatePosition)
}

inline void UpdatePosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headtransform_){nullptr}
    , decltype(_impl_.lefttransform_){nullptr}
    , decltype(_impl_.righttransform_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.songtime_){0}
  };
}

UpdatePosition::~UpdatePosition() {
  // @@protoc_insertion_point(destructor:UpdatePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.headtransform_;
  if (this != internal_default_instance()) delete _impl_.lefttransform_;
  if (this != internal_default_instance()) delete _impl_.righttransform_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void UpdatePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdatePosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.headtransform_ != nullptr);
      _impl_.headtransform_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lefttransform_ != nullptr);
      _impl_.lefttransform_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.righttransform_ != nullptr);
      _impl_.righttransform_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _impl_.songtime_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Transform headTransform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_headtransform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Transform leftTransform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttransform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Transform rightTransform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttransform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float songTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.songtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdatePosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .Transform headTransform = 1;
  if (_internal_has_headtransform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::headtransform(this),
        _Internal::headtransform(this).GetCachedSize(), target, stream);
  }

  // optional .Transform leftTransform = 2;
  if (_internal_has_lefttransform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lefttransform(this),
        _Internal::lefttransform(this).GetCachedSize(), target, stream);
  }

  // optional .Transform rightTransform = 3;
  if (_internal_has_righttransform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::righttransform(this),
        _Internal::righttransform(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // float songTime = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_songtime = this->_internal_songtime();
  uint32_t raw_songtime;
  memcpy(&raw_songtime, &tmp_songtime, sizeof(tmp_songtime));
  if (raw_songtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_songtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdatePosition)
  return target;
}

size_t UpdatePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdatePosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Transform headTransform = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.headtransform_);
    }

    // optional .Transform leftTransform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lefttransform_);
    }

    // optional .Transform rightTransform = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.righttransform_);
    }

  }
  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // float songTime = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_songtime = this->_internal_songtime();
  uint32_t raw_songtime;
  memcpy(&raw_songtime, &tmp_songtime, sizeof(tmp_songtime));
  if (raw_songtime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePosition::GetClassData() const { return &_class_data_; }


void UpdatePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePosition*>(&to_msg);
  auto& from = static_cast<const UpdatePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UpdatePosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_headtransform()->::Transform::MergeFrom(
          from._internal_headtransform());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lefttransform()->::Transform::MergeFrom(
          from._internal_lefttransform());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_righttransform()->::Transform::MergeFrom(
          from._internal_righttransform());
    }
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_songtime = from._internal_songtime();
  uint32_t raw_songtime;
  memcpy(&raw_songtime, &tmp_songtime, sizeof(tmp_songtime));
  if (raw_songtime != 0) {
    _this->_internal_set_songtime(from._internal_songtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePosition::CopyFrom(const UpdatePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdatePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePosition::IsInitialized() const {
  return true;
}

void UpdatePosition::InternalSwap(UpdatePosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePosition, _impl_.songtime_)
      + sizeof(UpdatePosition::_impl_.songtime_)
      - PROTOBUF_FIELD_OFFSET(UpdatePosition, _impl_.headtransform_)>(
          reinterpret_cast<char*>(&_impl_.headtransform_),
          reinterpret_cast<char*>(&other->_impl_.headtransform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[3]);
}

// ===================================================================

class ScoreUpdate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const ScoreUpdate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ScoreUpdate::_Internal::time(const ScoreUpdate* msg) {
  return *msg->_impl_.time_;
}
void ScoreUpdate::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
ScoreUpdate::ScoreUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ScoreUpdate)
}
ScoreUpdate::ScoreUpdate(const ScoreUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScoreUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newscores_){from._impl_.newscores_}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.score_){}
    , decltype(_impl_.combo_){}
    , decltype(_impl_.misses_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.misses_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.misses_));
  // @@protoc_insertion_point(copy_constructor:ScoreUpdate)
}

inline void ScoreUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newscores_){arena}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.combo_){0}
    , decltype(_impl_.misses_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScoreUpdate::~ScoreUpdate() {
  // @@protoc_insertion_point(destructor:ScoreUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScoreUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newscores_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void ScoreUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScoreUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newscores_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.misses_) -
      reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.misses_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float combo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.combo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float newScores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_newscores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_newscores(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float misses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.misses_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScoreUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_score(), target);
  }

  // float combo = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combo = this->_internal_combo();
  uint32_t raw_combo;
  memcpy(&raw_combo, &tmp_combo, sizeof(tmp_combo));
  if (raw_combo != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_combo(), target);
  }

  // repeated float newScores = 3;
  if (this->_internal_newscores_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_newscores(), target);
  }

  // float misses = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_misses = this->_internal_misses();
  uint32_t raw_misses;
  memcpy(&raw_misses, &tmp_misses, sizeof(tmp_misses));
  if (raw_misses != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_misses(), target);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreUpdate)
  return target;
}

size_t ScoreUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float newScores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_newscores_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // float score = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  // float combo = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combo = this->_internal_combo();
  uint32_t raw_combo;
  memcpy(&raw_combo, &tmp_combo, sizeof(tmp_combo));
  if (raw_combo != 0) {
    total_size += 1 + 4;
  }

  // float misses = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_misses = this->_internal_misses();
  uint32_t raw_misses;
  memcpy(&raw_misses, &tmp_misses, sizeof(tmp_misses));
  if (raw_misses != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScoreUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScoreUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScoreUpdate::GetClassData() const { return &_class_data_; }


void ScoreUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScoreUpdate*>(&to_msg);
  auto& from = static_cast<const ScoreUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ScoreUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.newscores_.MergeFrom(from._impl_.newscores_);
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combo = from._internal_combo();
  uint32_t raw_combo;
  memcpy(&raw_combo, &tmp_combo, sizeof(tmp_combo));
  if (raw_combo != 0) {
    _this->_internal_set_combo(from._internal_combo());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_misses = from._internal_misses();
  uint32_t raw_misses;
  memcpy(&raw_misses, &tmp_misses, sizeof(tmp_misses));
  if (raw_misses != 0) {
    _this->_internal_set_misses(from._internal_misses());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScoreUpdate::CopyFrom(const ScoreUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreUpdate::IsInitialized() const {
  return true;
}

void ScoreUpdate::InternalSwap(ScoreUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.newscores_.InternalSwap(&other->_impl_.newscores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoreUpdate, _impl_.misses_)
      + sizeof(ScoreUpdate::_impl_.misses_)
      - PROTOBUF_FIELD_OFFSET(ScoreUpdate, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[4]);
}

// ===================================================================

class StartBeatmap::_Internal {
 public:
};

StartBeatmap::StartBeatmap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartBeatmap)
}
StartBeatmap::StartBeatmap(const StartBeatmap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartBeatmap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.levelid_){}
    , decltype(_impl_.characteristic_){}
    , decltype(_impl_.difficulty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.levelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.levelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_levelid().empty()) {
    _this->_impl_.levelid_.Set(from._internal_levelid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.characteristic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.characteristic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_characteristic().empty()) {
    _this->_impl_.characteristic_.Set(from._internal_characteristic(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.difficulty_ = from._impl_.difficulty_;
  // @@protoc_insertion_point(copy_constructor:StartBeatmap)
}

inline void StartBeatmap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.levelid_){}
    , decltype(_impl_.characteristic_){}
    , decltype(_impl_.difficulty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.levelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.levelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.characteristic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.characteristic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartBeatmap::~StartBeatmap() {
  // @@protoc_insertion_point(destructor:StartBeatmap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartBeatmap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.levelid_.Destroy();
  _impl_.characteristic_.Destroy();
}

void StartBeatmap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartBeatmap::Clear() {
// @@protoc_insertion_point(message_clear_start:StartBeatmap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.levelid_.ClearToEmpty();
  _impl_.characteristic_.ClearToEmpty();
  _impl_.difficulty_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartBeatmap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string levelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_levelid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StartBeatmap.levelId"));
        } else
          goto handle_unusual;
        continue;
      // string characteristic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_characteristic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StartBeatmap.characteristic"));
        } else
          goto handle_unusual;
        continue;
      // int32 difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartBeatmap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartBeatmap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string levelId = 1;
  if (!this->_internal_levelid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_levelid().data(), static_cast<int>(this->_internal_levelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartBeatmap.levelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_levelid(), target);
  }

  // string characteristic = 2;
  if (!this->_internal_characteristic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_characteristic().data(), static_cast<int>(this->_internal_characteristic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartBeatmap.characteristic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_characteristic(), target);
  }

  // int32 difficulty = 3;
  if (this->_internal_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartBeatmap)
  return target;
}

size_t StartBeatmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartBeatmap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string levelId = 1;
  if (!this->_internal_levelid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_levelid());
  }

  // string characteristic = 2;
  if (!this->_internal_characteristic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_characteristic());
  }

  // int32 difficulty = 3;
  if (this->_internal_difficulty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_difficulty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartBeatmap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartBeatmap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartBeatmap::GetClassData() const { return &_class_data_; }


void StartBeatmap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartBeatmap*>(&to_msg);
  auto& from = static_cast<const StartBeatmap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartBeatmap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_levelid().empty()) {
    _this->_internal_set_levelid(from._internal_levelid());
  }
  if (!from._internal_characteristic().empty()) {
    _this->_internal_set_characteristic(from._internal_characteristic());
  }
  if (from._internal_difficulty() != 0) {
    _this->_internal_set_difficulty(from._internal_difficulty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartBeatmap::CopyFrom(const StartBeatmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartBeatmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartBeatmap::IsInitialized() const {
  return true;
}

void StartBeatmap::InternalSwap(StartBeatmap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.levelid_, lhs_arena,
      &other->_impl_.levelid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.characteristic_, lhs_arena,
      &other->_impl_.characteristic_, rhs_arena
  );
  swap(_impl_.difficulty_, other->_impl_.difficulty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartBeatmap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[5]);
}

// ===================================================================

class StartBeatmapFailure::_Internal {
 public:
};

StartBeatmapFailure::StartBeatmapFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartBeatmapFailure)
}
StartBeatmapFailure::StartBeatmapFailure(const StartBeatmapFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartBeatmapFailure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StartBeatmapFailure)
}

inline void StartBeatmapFailure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartBeatmapFailure::~StartBeatmapFailure() {
  // @@protoc_insertion_point(destructor:StartBeatmapFailure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartBeatmapFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void StartBeatmapFailure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartBeatmapFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:StartBeatmapFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartBeatmapFailure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StartBeatmapFailure.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartBeatmapFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartBeatmapFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartBeatmapFailure.error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartBeatmapFailure)
  return target;
}

size_t StartBeatmapFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartBeatmapFailure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 1;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartBeatmapFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartBeatmapFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartBeatmapFailure::GetClassData() const { return &_class_data_; }


void StartBeatmapFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartBeatmapFailure*>(&to_msg);
  auto& from = static_cast<const StartBeatmapFailure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartBeatmapFailure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartBeatmapFailure::CopyFrom(const StartBeatmapFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartBeatmapFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartBeatmapFailure::IsInitialized() const {
  return true;
}

void StartBeatmapFailure::InternalSwap(StartBeatmapFailure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartBeatmapFailure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[6]);
}

// ===================================================================

class ReadyUp::_Internal {
 public:
};

ReadyUp::ReadyUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReadyUp)
}
ReadyUp::ReadyUp(const ReadyUp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadyUp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReadyUp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadyUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadyUp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadyUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[7]);
}

// ===================================================================

class StartMap::_Internal {
 public:
};

StartMap::StartMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartMap)
}
StartMap::StartMap(const StartMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.songtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.songtime_ = from._impl_.songtime_;
  // @@protoc_insertion_point(copy_constructor:StartMap)
}

inline void StartMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.songtime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StartMap::~StartMap() {
  // @@protoc_insertion_point(destructor:StartMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartMap::Clear() {
// @@protoc_insertion_point(message_clear_start:StartMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.songtime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float songTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.songtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float songTime = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_songtime = this->_internal_songtime();
  uint32_t raw_songtime;
  memcpy(&raw_songtime, &tmp_songtime, sizeof(tmp_songtime));
  if (raw_songtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_songtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartMap)
  return target;
}

size_t StartMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float songTime = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_songtime = this->_internal_songtime();
  uint32_t raw_songtime;
  memcpy(&raw_songtime, &tmp_songtime, sizeof(tmp_songtime));
  if (raw_songtime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartMap::GetClassData() const { return &_class_data_; }


void StartMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartMap*>(&to_msg);
  auto& from = static_cast<const StartMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_songtime = from._internal_songtime();
  uint32_t raw_songtime;
  memcpy(&raw_songtime, &tmp_songtime, sizeof(tmp_songtime));
  if (raw_songtime != 0) {
    _this->_internal_set_songtime(from._internal_songtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartMap::CopyFrom(const StartMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMap::IsInitialized() const {
  return true;
}

void StartMap::InternalSwap(StartMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.songtime_, other->_impl_.songtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[8]);
}

// ===================================================================

class ExitMap::_Internal {
 public:
};

ExitMap::ExitMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ExitMap)
}
ExitMap::ExitMap(const ExitMap& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ExitMap* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ExitMap)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExitMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExitMap::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ExitMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[9]);
}

// ===================================================================

class PauseMap::_Internal {
 public:
};

PauseMap::PauseMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PauseMap)
}
PauseMap::PauseMap(const PauseMap& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PauseMap* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PauseMap)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseMap::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PauseMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[10]);
}

// ===================================================================

class PacketWrapper::_Internal {
 public:
  static const ::UpdatePosition& updateposition(const PacketWrapper* msg);
  static const ::StartBeatmap& startbeatmap(const PacketWrapper* msg);
  static const ::StartBeatmapFailure& startbeatmapfailure(const PacketWrapper* msg);
  static const ::ReadyUp& readyup(const PacketWrapper* msg);
  static const ::StartMap& startmap(const PacketWrapper* msg);
  static const ::ExitMap& exitmap(const PacketWrapper* msg);
  static const ::PauseMap& pausemap(const PacketWrapper* msg);
  static const ::ScoreUpdate& scoreupdate(const PacketWrapper* msg);
};

const ::UpdatePosition&
PacketWrapper::_Internal::updateposition(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.updateposition_;
}
const ::StartBeatmap&
PacketWrapper::_Internal::startbeatmap(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.startbeatmap_;
}
const ::StartBeatmapFailure&
PacketWrapper::_Internal::startbeatmapfailure(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.startbeatmapfailure_;
}
const ::ReadyUp&
PacketWrapper::_Internal::readyup(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.readyup_;
}
const ::StartMap&
PacketWrapper::_Internal::startmap(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.startmap_;
}
const ::ExitMap&
PacketWrapper::_Internal::exitmap(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.exitmap_;
}
const ::PauseMap&
PacketWrapper::_Internal::pausemap(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.pausemap_;
}
const ::ScoreUpdate&
PacketWrapper::_Internal::scoreupdate(const PacketWrapper* msg) {
  return *msg->_impl_.Packet_.scoreupdate_;
}
void PacketWrapper::set_allocated_updateposition(::UpdatePosition* updateposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (updateposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(updateposition);
    if (message_arena != submessage_arena) {
      updateposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateposition, submessage_arena);
    }
    set_has_updateposition();
    _impl_.Packet_.updateposition_ = updateposition;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.updatePosition)
}
void PacketWrapper::set_allocated_startbeatmap(::StartBeatmap* startbeatmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (startbeatmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(startbeatmap);
    if (message_arena != submessage_arena) {
      startbeatmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startbeatmap, submessage_arena);
    }
    set_has_startbeatmap();
    _impl_.Packet_.startbeatmap_ = startbeatmap;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.startBeatmap)
}
void PacketWrapper::set_allocated_startbeatmapfailure(::StartBeatmapFailure* startbeatmapfailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (startbeatmapfailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(startbeatmapfailure);
    if (message_arena != submessage_arena) {
      startbeatmapfailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startbeatmapfailure, submessage_arena);
    }
    set_has_startbeatmapfailure();
    _impl_.Packet_.startbeatmapfailure_ = startbeatmapfailure;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.startBeatmapFailure)
}
void PacketWrapper::set_allocated_readyup(::ReadyUp* readyup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (readyup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(readyup);
    if (message_arena != submessage_arena) {
      readyup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readyup, submessage_arena);
    }
    set_has_readyup();
    _impl_.Packet_.readyup_ = readyup;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.readyUp)
}
void PacketWrapper::set_allocated_startmap(::StartMap* startmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (startmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(startmap);
    if (message_arena != submessage_arena) {
      startmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startmap, submessage_arena);
    }
    set_has_startmap();
    _impl_.Packet_.startmap_ = startmap;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.startMap)
}
void PacketWrapper::set_allocated_exitmap(::ExitMap* exitmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (exitmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exitmap);
    if (message_arena != submessage_arena) {
      exitmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exitmap, submessage_arena);
    }
    set_has_exitmap();
    _impl_.Packet_.exitmap_ = exitmap;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.exitMap)
}
void PacketWrapper::set_allocated_pausemap(::PauseMap* pausemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (pausemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pausemap);
    if (message_arena != submessage_arena) {
      pausemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pausemap, submessage_arena);
    }
    set_has_pausemap();
    _impl_.Packet_.pausemap_ = pausemap;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.pauseMap)
}
void PacketWrapper::set_allocated_scoreupdate(::ScoreUpdate* scoreupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Packet();
  if (scoreupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scoreupdate);
    if (message_arena != submessage_arena) {
      scoreupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoreupdate, submessage_arena);
    }
    set_has_scoreupdate();
    _impl_.Packet_.scoreupdate_ = scoreupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:PacketWrapper.scoreUpdate)
}
PacketWrapper::PacketWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PacketWrapper)
}
PacketWrapper::PacketWrapper(const PacketWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queryresultid_){}
    , decltype(_impl_.Packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.queryresultid_ = from._impl_.queryresultid_;
  clear_has_Packet();
  switch (from.Packet_case()) {
    case kUpdatePosition: {
      _this->_internal_mutable_updateposition()->::UpdatePosition::MergeFrom(
          from._internal_updateposition());
      break;
    }
    case kStartBeatmap: {
      _this->_internal_mutable_startbeatmap()->::StartBeatmap::MergeFrom(
          from._internal_startbeatmap());
      break;
    }
    case kStartBeatmapFailure: {
      _this->_internal_mutable_startbeatmapfailure()->::StartBeatmapFailure::MergeFrom(
          from._internal_startbeatmapfailure());
      break;
    }
    case kReadyUp: {
      _this->_internal_mutable_readyup()->::ReadyUp::MergeFrom(
          from._internal_readyup());
      break;
    }
    case kStartMap: {
      _this->_internal_mutable_startmap()->::StartMap::MergeFrom(
          from._internal_startmap());
      break;
    }
    case kExitMap: {
      _this->_internal_mutable_exitmap()->::ExitMap::MergeFrom(
          from._internal_exitmap());
      break;
    }
    case kPauseMap: {
      _this->_internal_mutable_pausemap()->::PauseMap::MergeFrom(
          from._internal_pausemap());
      break;
    }
    case kScoreUpdate: {
      _this->_internal_mutable_scoreupdate()->::ScoreUpdate::MergeFrom(
          from._internal_scoreupdate());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PacketWrapper)
}

inline void PacketWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queryresultid_){uint64_t{0u}}
    , decltype(_impl_.Packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Packet();
}

PacketWrapper::~PacketWrapper() {
  // @@protoc_insertion_point(destructor:PacketWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Packet()) {
    clear_Packet();
  }
}

void PacketWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketWrapper::clear_Packet() {
// @@protoc_insertion_point(one_of_clear_start:PacketWrapper)
  switch (Packet_case()) {
    case kUpdatePosition: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.updateposition_;
      }
      break;
    }
    case kStartBeatmap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.startbeatmap_;
      }
      break;
    }
    case kStartBeatmapFailure: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.startbeatmapfailure_;
      }
      break;
    }
    case kReadyUp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.readyup_;
      }
      break;
    }
    case kStartMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.startmap_;
      }
      break;
    }
    case kExitMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.exitmap_;
      }
      break;
    }
    case kPauseMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.pausemap_;
      }
      break;
    }
    case kScoreUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Packet_.scoreupdate_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PACKET_NOT_SET;
}


void PacketWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:PacketWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queryresultid_ = uint64_t{0u};
  clear_Packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 queryResultId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.queryresultid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UpdatePosition updatePosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StartBeatmap startBeatmap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_startbeatmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StartBeatmapFailure startBeatmapFailure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_startbeatmapfailure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ReadyUp readyUp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_readyup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StartMap startMap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_startmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExitMap exitMap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_exitmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PauseMap pauseMap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pausemap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ScoreUpdate scoreUpdate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoreupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PacketWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 queryResultId = 1;
  if (this->_internal_queryresultid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_queryresultid(), target);
  }

  // .UpdatePosition updatePosition = 2;
  if (_internal_has_updateposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::updateposition(this),
        _Internal::updateposition(this).GetCachedSize(), target, stream);
  }

  // .StartBeatmap startBeatmap = 3;
  if (_internal_has_startbeatmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::startbeatmap(this),
        _Internal::startbeatmap(this).GetCachedSize(), target, stream);
  }

  // .StartBeatmapFailure startBeatmapFailure = 4;
  if (_internal_has_startbeatmapfailure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::startbeatmapfailure(this),
        _Internal::startbeatmapfailure(this).GetCachedSize(), target, stream);
  }

  // .ReadyUp readyUp = 5;
  if (_internal_has_readyup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::readyup(this),
        _Internal::readyup(this).GetCachedSize(), target, stream);
  }

  // .StartMap startMap = 6;
  if (_internal_has_startmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::startmap(this),
        _Internal::startmap(this).GetCachedSize(), target, stream);
  }

  // .ExitMap exitMap = 7;
  if (_internal_has_exitmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::exitmap(this),
        _Internal::exitmap(this).GetCachedSize(), target, stream);
  }

  // .PauseMap pauseMap = 8;
  if (_internal_has_pausemap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::pausemap(this),
        _Internal::pausemap(this).GetCachedSize(), target, stream);
  }

  // .ScoreUpdate scoreUpdate = 9;
  if (_internal_has_scoreupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::scoreupdate(this),
        _Internal::scoreupdate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PacketWrapper)
  return target;
}

size_t PacketWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PacketWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 queryResultId = 1;
  if (this->_internal_queryresultid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_queryresultid());
  }

  switch (Packet_case()) {
    // .UpdatePosition updatePosition = 2;
    case kUpdatePosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.updateposition_);
      break;
    }
    // .StartBeatmap startBeatmap = 3;
    case kStartBeatmap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.startbeatmap_);
      break;
    }
    // .StartBeatmapFailure startBeatmapFailure = 4;
    case kStartBeatmapFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.startbeatmapfailure_);
      break;
    }
    // .ReadyUp readyUp = 5;
    case kReadyUp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.readyup_);
      break;
    }
    // .StartMap startMap = 6;
    case kStartMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.startmap_);
      break;
    }
    // .ExitMap exitMap = 7;
    case kExitMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.exitmap_);
      break;
    }
    // .PauseMap pauseMap = 8;
    case kPauseMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.pausemap_);
      break;
    }
    // .ScoreUpdate scoreUpdate = 9;
    case kScoreUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Packet_.scoreupdate_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketWrapper::GetClassData() const { return &_class_data_; }


void PacketWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketWrapper*>(&to_msg);
  auto& from = static_cast<const PacketWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PacketWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_queryresultid() != 0) {
    _this->_internal_set_queryresultid(from._internal_queryresultid());
  }
  switch (from.Packet_case()) {
    case kUpdatePosition: {
      _this->_internal_mutable_updateposition()->::UpdatePosition::MergeFrom(
          from._internal_updateposition());
      break;
    }
    case kStartBeatmap: {
      _this->_internal_mutable_startbeatmap()->::StartBeatmap::MergeFrom(
          from._internal_startbeatmap());
      break;
    }
    case kStartBeatmapFailure: {
      _this->_internal_mutable_startbeatmapfailure()->::StartBeatmapFailure::MergeFrom(
          from._internal_startbeatmapfailure());
      break;
    }
    case kReadyUp: {
      _this->_internal_mutable_readyup()->::ReadyUp::MergeFrom(
          from._internal_readyup());
      break;
    }
    case kStartMap: {
      _this->_internal_mutable_startmap()->::StartMap::MergeFrom(
          from._internal_startmap());
      break;
    }
    case kExitMap: {
      _this->_internal_mutable_exitmap()->::ExitMap::MergeFrom(
          from._internal_exitmap());
      break;
    }
    case kPauseMap: {
      _this->_internal_mutable_pausemap()->::PauseMap::MergeFrom(
          from._internal_pausemap());
      break;
    }
    case kScoreUpdate: {
      _this->_internal_mutable_scoreupdate()->::ScoreUpdate::MergeFrom(
          from._internal_scoreupdate());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketWrapper::CopyFrom(const PacketWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PacketWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketWrapper::IsInitialized() const {
  return true;
}

void PacketWrapper::InternalSwap(PacketWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.queryresultid_, other->_impl_.queryresultid_);
  swap(_impl_.Packet_, other->_impl_.Packet_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_live_5fstream_2eproto_getter, &descriptor_table_live_5fstream_2eproto_once,
      file_level_metadata_live_5fstream_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector3*
Arena::CreateMaybeMessage< ::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Quaternion*
Arena::CreateMaybeMessage< ::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::Transform*
Arena::CreateMaybeMessage< ::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdatePosition*
Arena::CreateMaybeMessage< ::UpdatePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdatePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreUpdate*
Arena::CreateMaybeMessage< ::ScoreUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScoreUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::StartBeatmap*
Arena::CreateMaybeMessage< ::StartBeatmap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartBeatmap >(arena);
}
template<> PROTOBUF_NOINLINE ::StartBeatmapFailure*
Arena::CreateMaybeMessage< ::StartBeatmapFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartBeatmapFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadyUp*
Arena::CreateMaybeMessage< ::ReadyUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadyUp >(arena);
}
template<> PROTOBUF_NOINLINE ::StartMap*
Arena::CreateMaybeMessage< ::StartMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartMap >(arena);
}
template<> PROTOBUF_NOINLINE ::ExitMap*
Arena::CreateMaybeMessage< ::ExitMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExitMap >(arena);
}
template<> PROTOBUF_NOINLINE ::PauseMap*
Arena::CreateMaybeMessage< ::PauseMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PauseMap >(arena);
}
template<> PROTOBUF_NOINLINE ::PacketWrapper*
Arena::CreateMaybeMessage< ::PacketWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PacketWrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
