// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: live_stream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_live_5fstream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_live_5fstream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_live_5fstream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_live_5fstream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_live_5fstream_2eproto;
class ExitMap;
struct ExitMapDefaultTypeInternal;
extern ExitMapDefaultTypeInternal _ExitMap_default_instance_;
class PacketWrapper;
struct PacketWrapperDefaultTypeInternal;
extern PacketWrapperDefaultTypeInternal _PacketWrapper_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class ReadyUp;
struct ReadyUpDefaultTypeInternal;
extern ReadyUpDefaultTypeInternal _ReadyUp_default_instance_;
class StartBeatmap;
struct StartBeatmapDefaultTypeInternal;
extern StartBeatmapDefaultTypeInternal _StartBeatmap_default_instance_;
class StartBeatmapFailure;
struct StartBeatmapFailureDefaultTypeInternal;
extern StartBeatmapFailureDefaultTypeInternal _StartBeatmapFailure_default_instance_;
class StartMap;
struct StartMapDefaultTypeInternal;
extern StartMapDefaultTypeInternal _StartMap_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class UpdatePosition;
struct UpdatePositionDefaultTypeInternal;
extern UpdatePositionDefaultTypeInternal _UpdatePosition_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ExitMap* Arena::CreateMaybeMessage<::ExitMap>(Arena*);
template<> ::PacketWrapper* Arena::CreateMaybeMessage<::PacketWrapper>(Arena*);
template<> ::Quaternion* Arena::CreateMaybeMessage<::Quaternion>(Arena*);
template<> ::ReadyUp* Arena::CreateMaybeMessage<::ReadyUp>(Arena*);
template<> ::StartBeatmap* Arena::CreateMaybeMessage<::StartBeatmap>(Arena*);
template<> ::StartBeatmapFailure* Arena::CreateMaybeMessage<::StartBeatmapFailure>(Arena*);
template<> ::StartMap* Arena::CreateMaybeMessage<::StartMap>(Arena*);
template<> ::Transform* Arena::CreateMaybeMessage<::Transform>(Arena*);
template<> ::UpdatePosition* Arena::CreateMaybeMessage<::UpdatePosition>(Arena*);
template<> ::Vector3* Arena::CreateMaybeMessage<::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit constexpr Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit constexpr Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Quaternion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit constexpr Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transform& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Vector3& position() const;
  PROTOBUF_NODISCARD ::Vector3* release_position();
  ::Vector3* mutable_position();
  void set_allocated_position(::Vector3* position);
  private:
  const ::Vector3& _internal_position() const;
  ::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Vector3* position);
  ::Vector3* unsafe_arena_release_position();

  // .Quaternion rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::Quaternion* release_rotation();
  ::Quaternion* mutable_rotation();
  void set_allocated_rotation(::Quaternion* rotation);
  private:
  const ::Quaternion& _internal_rotation() const;
  ::Quaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Quaternion* rotation);
  ::Quaternion* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* position_;
  ::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class UpdatePosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdatePosition) */ {
 public:
  inline UpdatePosition() : UpdatePosition(nullptr) {}
  ~UpdatePosition() override;
  explicit constexpr UpdatePosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePosition(const UpdatePosition& from);
  UpdatePosition(UpdatePosition&& from) noexcept
    : UpdatePosition() {
    *this = ::std::move(from);
  }

  inline UpdatePosition& operator=(const UpdatePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePosition& operator=(UpdatePosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePosition* internal_default_instance() {
    return reinterpret_cast<const UpdatePosition*>(
               &_UpdatePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdatePosition& a, UpdatePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdatePosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdatePosition";
  }
  protected:
  explicit UpdatePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadTransformFieldNumber = 1,
    kLeftTransformFieldNumber = 2,
    kRightTransformFieldNumber = 3,
  };
  // optional .Transform headTransform = 1;
  bool has_headtransform() const;
  private:
  bool _internal_has_headtransform() const;
  public:
  void clear_headtransform();
  const ::Transform& headtransform() const;
  PROTOBUF_NODISCARD ::Transform* release_headtransform();
  ::Transform* mutable_headtransform();
  void set_allocated_headtransform(::Transform* headtransform);
  private:
  const ::Transform& _internal_headtransform() const;
  ::Transform* _internal_mutable_headtransform();
  public:
  void unsafe_arena_set_allocated_headtransform(
      ::Transform* headtransform);
  ::Transform* unsafe_arena_release_headtransform();

  // optional .Transform leftTransform = 2;
  bool has_lefttransform() const;
  private:
  bool _internal_has_lefttransform() const;
  public:
  void clear_lefttransform();
  const ::Transform& lefttransform() const;
  PROTOBUF_NODISCARD ::Transform* release_lefttransform();
  ::Transform* mutable_lefttransform();
  void set_allocated_lefttransform(::Transform* lefttransform);
  private:
  const ::Transform& _internal_lefttransform() const;
  ::Transform* _internal_mutable_lefttransform();
  public:
  void unsafe_arena_set_allocated_lefttransform(
      ::Transform* lefttransform);
  ::Transform* unsafe_arena_release_lefttransform();

  // optional .Transform rightTransform = 3;
  bool has_righttransform() const;
  private:
  bool _internal_has_righttransform() const;
  public:
  void clear_righttransform();
  const ::Transform& righttransform() const;
  PROTOBUF_NODISCARD ::Transform* release_righttransform();
  ::Transform* mutable_righttransform();
  void set_allocated_righttransform(::Transform* righttransform);
  private:
  const ::Transform& _internal_righttransform() const;
  ::Transform* _internal_mutable_righttransform();
  public:
  void unsafe_arena_set_allocated_righttransform(
      ::Transform* righttransform);
  ::Transform* unsafe_arena_release_righttransform();

  // @@protoc_insertion_point(class_scope:UpdatePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Transform* headtransform_;
  ::Transform* lefttransform_;
  ::Transform* righttransform_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StartBeatmap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartBeatmap) */ {
 public:
  inline StartBeatmap() : StartBeatmap(nullptr) {}
  ~StartBeatmap() override;
  explicit constexpr StartBeatmap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartBeatmap(const StartBeatmap& from);
  StartBeatmap(StartBeatmap&& from) noexcept
    : StartBeatmap() {
    *this = ::std::move(from);
  }

  inline StartBeatmap& operator=(const StartBeatmap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBeatmap& operator=(StartBeatmap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartBeatmap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartBeatmap* internal_default_instance() {
    return reinterpret_cast<const StartBeatmap*>(
               &_StartBeatmap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StartBeatmap& a, StartBeatmap& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBeatmap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBeatmap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartBeatmap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartBeatmap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartBeatmap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartBeatmap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBeatmap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartBeatmap";
  }
  protected:
  explicit StartBeatmap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelIdFieldNumber = 1,
    kCharacteristicFieldNumber = 2,
    kDifficultyFieldNumber = 3,
  };
  // string levelId = 1;
  void clear_levelid();
  const std::string& levelid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_levelid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_levelid();
  PROTOBUF_NODISCARD std::string* release_levelid();
  void set_allocated_levelid(std::string* levelid);
  private:
  const std::string& _internal_levelid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_levelid(const std::string& value);
  std::string* _internal_mutable_levelid();
  public:

  // string characteristic = 2;
  void clear_characteristic();
  const std::string& characteristic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_characteristic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_characteristic();
  PROTOBUF_NODISCARD std::string* release_characteristic();
  void set_allocated_characteristic(std::string* characteristic);
  private:
  const std::string& _internal_characteristic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_characteristic(const std::string& value);
  std::string* _internal_mutable_characteristic();
  public:

  // int32 difficulty = 3;
  void clear_difficulty();
  int32_t difficulty() const;
  void set_difficulty(int32_t value);
  private:
  int32_t _internal_difficulty() const;
  void _internal_set_difficulty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StartBeatmap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr levelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characteristic_;
  int32_t difficulty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StartBeatmapFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartBeatmapFailure) */ {
 public:
  inline StartBeatmapFailure() : StartBeatmapFailure(nullptr) {}
  ~StartBeatmapFailure() override;
  explicit constexpr StartBeatmapFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartBeatmapFailure(const StartBeatmapFailure& from);
  StartBeatmapFailure(StartBeatmapFailure&& from) noexcept
    : StartBeatmapFailure() {
    *this = ::std::move(from);
  }

  inline StartBeatmapFailure& operator=(const StartBeatmapFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBeatmapFailure& operator=(StartBeatmapFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartBeatmapFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartBeatmapFailure* internal_default_instance() {
    return reinterpret_cast<const StartBeatmapFailure*>(
               &_StartBeatmapFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartBeatmapFailure& a, StartBeatmapFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBeatmapFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBeatmapFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartBeatmapFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartBeatmapFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartBeatmapFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartBeatmapFailure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBeatmapFailure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartBeatmapFailure";
  }
  protected:
  explicit StartBeatmapFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // string error = 1;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:StartBeatmapFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class ReadyUp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReadyUp) */ {
 public:
  inline ReadyUp() : ReadyUp(nullptr) {}
  explicit constexpr ReadyUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadyUp(const ReadyUp& from);
  ReadyUp(ReadyUp&& from) noexcept
    : ReadyUp() {
    *this = ::std::move(from);
  }

  inline ReadyUp& operator=(const ReadyUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyUp& operator=(ReadyUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadyUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadyUp* internal_default_instance() {
    return reinterpret_cast<const ReadyUp*>(
               &_ReadyUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadyUp& a, ReadyUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadyUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadyUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadyUp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadyUp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadyUp";
  }
  protected:
  explicit ReadyUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReadyUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StartMap final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:StartMap) */ {
 public:
  inline StartMap() : StartMap(nullptr) {}
  explicit constexpr StartMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartMap(const StartMap& from);
  StartMap(StartMap&& from) noexcept
    : StartMap() {
    *this = ::std::move(from);
  }

  inline StartMap& operator=(const StartMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMap& operator=(StartMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartMap* internal_default_instance() {
    return reinterpret_cast<const StartMap*>(
               &_StartMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartMap& a, StartMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartMap& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartMap& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartMap";
  }
  protected:
  explicit StartMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:StartMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class ExitMap final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ExitMap) */ {
 public:
  inline ExitMap() : ExitMap(nullptr) {}
  explicit constexpr ExitMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExitMap(const ExitMap& from);
  ExitMap(ExitMap&& from) noexcept
    : ExitMap() {
    *this = ::std::move(from);
  }

  inline ExitMap& operator=(const ExitMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExitMap& operator=(ExitMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExitMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExitMap* internal_default_instance() {
    return reinterpret_cast<const ExitMap*>(
               &_ExitMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExitMap& a, ExitMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ExitMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExitMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExitMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExitMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExitMap& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExitMap& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExitMap";
  }
  protected:
  explicit ExitMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ExitMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_live_5fstream_2eproto;
};
// -------------------------------------------------------------------

class PacketWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketWrapper) */ {
 public:
  inline PacketWrapper() : PacketWrapper(nullptr) {}
  ~PacketWrapper() override;
  explicit constexpr PacketWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketWrapper(const PacketWrapper& from);
  PacketWrapper(PacketWrapper&& from) noexcept
    : PacketWrapper() {
    *this = ::std::move(from);
  }

  inline PacketWrapper& operator=(const PacketWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketWrapper& operator=(PacketWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum PacketCase {
    kUpdatePosition = 2,
    kStartBeatmap = 3,
    kStartBeatmapFailure = 4,
    kReadyUp = 5,
    kStartMap = 6,
    kExitMap = 7,
    PACKET_NOT_SET = 0,
  };

  static inline const PacketWrapper* internal_default_instance() {
    return reinterpret_cast<const PacketWrapper*>(
               &_PacketWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PacketWrapper& a, PacketWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PacketWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketWrapper";
  }
  protected:
  explicit PacketWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryResultIdFieldNumber = 1,
    kUpdatePositionFieldNumber = 2,
    kStartBeatmapFieldNumber = 3,
    kStartBeatmapFailureFieldNumber = 4,
    kReadyUpFieldNumber = 5,
    kStartMapFieldNumber = 6,
    kExitMapFieldNumber = 7,
  };
  // uint64 queryResultId = 1;
  void clear_queryresultid();
  uint64_t queryresultid() const;
  void set_queryresultid(uint64_t value);
  private:
  uint64_t _internal_queryresultid() const;
  void _internal_set_queryresultid(uint64_t value);
  public:

  // .UpdatePosition updatePosition = 2;
  bool has_updateposition() const;
  private:
  bool _internal_has_updateposition() const;
  public:
  void clear_updateposition();
  const ::UpdatePosition& updateposition() const;
  PROTOBUF_NODISCARD ::UpdatePosition* release_updateposition();
  ::UpdatePosition* mutable_updateposition();
  void set_allocated_updateposition(::UpdatePosition* updateposition);
  private:
  const ::UpdatePosition& _internal_updateposition() const;
  ::UpdatePosition* _internal_mutable_updateposition();
  public:
  void unsafe_arena_set_allocated_updateposition(
      ::UpdatePosition* updateposition);
  ::UpdatePosition* unsafe_arena_release_updateposition();

  // .StartBeatmap startBeatmap = 3;
  bool has_startbeatmap() const;
  private:
  bool _internal_has_startbeatmap() const;
  public:
  void clear_startbeatmap();
  const ::StartBeatmap& startbeatmap() const;
  PROTOBUF_NODISCARD ::StartBeatmap* release_startbeatmap();
  ::StartBeatmap* mutable_startbeatmap();
  void set_allocated_startbeatmap(::StartBeatmap* startbeatmap);
  private:
  const ::StartBeatmap& _internal_startbeatmap() const;
  ::StartBeatmap* _internal_mutable_startbeatmap();
  public:
  void unsafe_arena_set_allocated_startbeatmap(
      ::StartBeatmap* startbeatmap);
  ::StartBeatmap* unsafe_arena_release_startbeatmap();

  // .StartBeatmapFailure startBeatmapFailure = 4;
  bool has_startbeatmapfailure() const;
  private:
  bool _internal_has_startbeatmapfailure() const;
  public:
  void clear_startbeatmapfailure();
  const ::StartBeatmapFailure& startbeatmapfailure() const;
  PROTOBUF_NODISCARD ::StartBeatmapFailure* release_startbeatmapfailure();
  ::StartBeatmapFailure* mutable_startbeatmapfailure();
  void set_allocated_startbeatmapfailure(::StartBeatmapFailure* startbeatmapfailure);
  private:
  const ::StartBeatmapFailure& _internal_startbeatmapfailure() const;
  ::StartBeatmapFailure* _internal_mutable_startbeatmapfailure();
  public:
  void unsafe_arena_set_allocated_startbeatmapfailure(
      ::StartBeatmapFailure* startbeatmapfailure);
  ::StartBeatmapFailure* unsafe_arena_release_startbeatmapfailure();

  // .ReadyUp readyUp = 5;
  bool has_readyup() const;
  private:
  bool _internal_has_readyup() const;
  public:
  void clear_readyup();
  const ::ReadyUp& readyup() const;
  PROTOBUF_NODISCARD ::ReadyUp* release_readyup();
  ::ReadyUp* mutable_readyup();
  void set_allocated_readyup(::ReadyUp* readyup);
  private:
  const ::ReadyUp& _internal_readyup() const;
  ::ReadyUp* _internal_mutable_readyup();
  public:
  void unsafe_arena_set_allocated_readyup(
      ::ReadyUp* readyup);
  ::ReadyUp* unsafe_arena_release_readyup();

  // .StartMap startMap = 6;
  bool has_startmap() const;
  private:
  bool _internal_has_startmap() const;
  public:
  void clear_startmap();
  const ::StartMap& startmap() const;
  PROTOBUF_NODISCARD ::StartMap* release_startmap();
  ::StartMap* mutable_startmap();
  void set_allocated_startmap(::StartMap* startmap);
  private:
  const ::StartMap& _internal_startmap() const;
  ::StartMap* _internal_mutable_startmap();
  public:
  void unsafe_arena_set_allocated_startmap(
      ::StartMap* startmap);
  ::StartMap* unsafe_arena_release_startmap();

  // .ExitMap exitMap = 7;
  bool has_exitmap() const;
  private:
  bool _internal_has_exitmap() const;
  public:
  void clear_exitmap();
  const ::ExitMap& exitmap() const;
  PROTOBUF_NODISCARD ::ExitMap* release_exitmap();
  ::ExitMap* mutable_exitmap();
  void set_allocated_exitmap(::ExitMap* exitmap);
  private:
  const ::ExitMap& _internal_exitmap() const;
  ::ExitMap* _internal_mutable_exitmap();
  public:
  void unsafe_arena_set_allocated_exitmap(
      ::ExitMap* exitmap);
  ::ExitMap* unsafe_arena_release_exitmap();

  void clear_Packet();
  PacketCase Packet_case() const;
  // @@protoc_insertion_point(class_scope:PacketWrapper)
 private:
  class _Internal;
  void set_has_updateposition();
  void set_has_startbeatmap();
  void set_has_startbeatmapfailure();
  void set_has_readyup();
  void set_has_startmap();
  void set_has_exitmap();

  inline bool has_Packet() const;
  inline void clear_has_Packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t queryresultid_;
  union PacketUnion {
    constexpr PacketUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::UpdatePosition* updateposition_;
    ::StartBeatmap* startbeatmap_;
    ::StartBeatmapFailure* startbeatmapfailure_;
    ::ReadyUp* readyup_;
    ::StartMap* startmap_;
    ::ExitMap* exitmap_;
  } Packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_live_5fstream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vector3.z)
}

// -------------------------------------------------------------------

// Quaternion

// float x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Quaternion.x)
}

// float y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Quaternion.y)
}

// float z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Quaternion.z)
}

// float w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Quaternion.w)
}

// -------------------------------------------------------------------

// Transform

// .Vector3 position = 1;
inline bool Transform::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Transform::has_position() const {
  return _internal_has_position();
}
inline void Transform::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Vector3& Transform::_internal_position() const {
  const ::Vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& Transform::position() const {
  // @@protoc_insertion_point(field_get:Transform.position)
  return _internal_position();
}
inline void Transform::unsafe_arena_set_allocated_position(
    ::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transform.position)
}
inline ::Vector3* Transform::release_position() {
  
  ::Vector3* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* Transform::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Transform.position)
  
  ::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Vector3* Transform::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Vector3* Transform::mutable_position() {
  ::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Transform.position)
  return _msg;
}
inline void Transform::set_allocated_position(::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Vector3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Transform.position)
}

// .Quaternion rotation = 2;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::Quaternion& Transform::_internal_rotation() const {
  const ::Quaternion* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Quaternion&>(
      ::_Quaternion_default_instance_);
}
inline const ::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(
    ::Quaternion* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transform.rotation)
}
inline ::Quaternion* Transform::release_rotation() {
  
  ::Quaternion* temp = rotation_;
  rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Quaternion* Transform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Transform.rotation)
  
  ::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Quaternion* Transform::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Quaternion>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Quaternion* Transform::mutable_rotation() {
  ::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Transform.rotation)
  return _msg;
}
inline void Transform::set_allocated_rotation(::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Quaternion>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Transform.rotation)
}

// -------------------------------------------------------------------

// UpdatePosition

// optional .Transform headTransform = 1;
inline bool UpdatePosition::_internal_has_headtransform() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || headtransform_ != nullptr);
  return value;
}
inline bool UpdatePosition::has_headtransform() const {
  return _internal_has_headtransform();
}
inline void UpdatePosition::clear_headtransform() {
  if (headtransform_ != nullptr) headtransform_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Transform& UpdatePosition::_internal_headtransform() const {
  const ::Transform* p = headtransform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Transform&>(
      ::_Transform_default_instance_);
}
inline const ::Transform& UpdatePosition::headtransform() const {
  // @@protoc_insertion_point(field_get:UpdatePosition.headTransform)
  return _internal_headtransform();
}
inline void UpdatePosition::unsafe_arena_set_allocated_headtransform(
    ::Transform* headtransform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headtransform_);
  }
  headtransform_ = headtransform;
  if (headtransform) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdatePosition.headTransform)
}
inline ::Transform* UpdatePosition::release_headtransform() {
  _has_bits_[0] &= ~0x00000001u;
  ::Transform* temp = headtransform_;
  headtransform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Transform* UpdatePosition::unsafe_arena_release_headtransform() {
  // @@protoc_insertion_point(field_release:UpdatePosition.headTransform)
  _has_bits_[0] &= ~0x00000001u;
  ::Transform* temp = headtransform_;
  headtransform_ = nullptr;
  return temp;
}
inline ::Transform* UpdatePosition::_internal_mutable_headtransform() {
  _has_bits_[0] |= 0x00000001u;
  if (headtransform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Transform>(GetArenaForAllocation());
    headtransform_ = p;
  }
  return headtransform_;
}
inline ::Transform* UpdatePosition::mutable_headtransform() {
  ::Transform* _msg = _internal_mutable_headtransform();
  // @@protoc_insertion_point(field_mutable:UpdatePosition.headTransform)
  return _msg;
}
inline void UpdatePosition::set_allocated_headtransform(::Transform* headtransform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete headtransform_;
  }
  if (headtransform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Transform>::GetOwningArena(headtransform);
    if (message_arena != submessage_arena) {
      headtransform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headtransform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  headtransform_ = headtransform;
  // @@protoc_insertion_point(field_set_allocated:UpdatePosition.headTransform)
}

// optional .Transform leftTransform = 2;
inline bool UpdatePosition::_internal_has_lefttransform() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lefttransform_ != nullptr);
  return value;
}
inline bool UpdatePosition::has_lefttransform() const {
  return _internal_has_lefttransform();
}
inline void UpdatePosition::clear_lefttransform() {
  if (lefttransform_ != nullptr) lefttransform_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Transform& UpdatePosition::_internal_lefttransform() const {
  const ::Transform* p = lefttransform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Transform&>(
      ::_Transform_default_instance_);
}
inline const ::Transform& UpdatePosition::lefttransform() const {
  // @@protoc_insertion_point(field_get:UpdatePosition.leftTransform)
  return _internal_lefttransform();
}
inline void UpdatePosition::unsafe_arena_set_allocated_lefttransform(
    ::Transform* lefttransform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttransform_);
  }
  lefttransform_ = lefttransform;
  if (lefttransform) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdatePosition.leftTransform)
}
inline ::Transform* UpdatePosition::release_lefttransform() {
  _has_bits_[0] &= ~0x00000002u;
  ::Transform* temp = lefttransform_;
  lefttransform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Transform* UpdatePosition::unsafe_arena_release_lefttransform() {
  // @@protoc_insertion_point(field_release:UpdatePosition.leftTransform)
  _has_bits_[0] &= ~0x00000002u;
  ::Transform* temp = lefttransform_;
  lefttransform_ = nullptr;
  return temp;
}
inline ::Transform* UpdatePosition::_internal_mutable_lefttransform() {
  _has_bits_[0] |= 0x00000002u;
  if (lefttransform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Transform>(GetArenaForAllocation());
    lefttransform_ = p;
  }
  return lefttransform_;
}
inline ::Transform* UpdatePosition::mutable_lefttransform() {
  ::Transform* _msg = _internal_mutable_lefttransform();
  // @@protoc_insertion_point(field_mutable:UpdatePosition.leftTransform)
  return _msg;
}
inline void UpdatePosition::set_allocated_lefttransform(::Transform* lefttransform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lefttransform_;
  }
  if (lefttransform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Transform>::GetOwningArena(lefttransform);
    if (message_arena != submessage_arena) {
      lefttransform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttransform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lefttransform_ = lefttransform;
  // @@protoc_insertion_point(field_set_allocated:UpdatePosition.leftTransform)
}

// optional .Transform rightTransform = 3;
inline bool UpdatePosition::_internal_has_righttransform() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || righttransform_ != nullptr);
  return value;
}
inline bool UpdatePosition::has_righttransform() const {
  return _internal_has_righttransform();
}
inline void UpdatePosition::clear_righttransform() {
  if (righttransform_ != nullptr) righttransform_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Transform& UpdatePosition::_internal_righttransform() const {
  const ::Transform* p = righttransform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Transform&>(
      ::_Transform_default_instance_);
}
inline const ::Transform& UpdatePosition::righttransform() const {
  // @@protoc_insertion_point(field_get:UpdatePosition.rightTransform)
  return _internal_righttransform();
}
inline void UpdatePosition::unsafe_arena_set_allocated_righttransform(
    ::Transform* righttransform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttransform_);
  }
  righttransform_ = righttransform;
  if (righttransform) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdatePosition.rightTransform)
}
inline ::Transform* UpdatePosition::release_righttransform() {
  _has_bits_[0] &= ~0x00000004u;
  ::Transform* temp = righttransform_;
  righttransform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Transform* UpdatePosition::unsafe_arena_release_righttransform() {
  // @@protoc_insertion_point(field_release:UpdatePosition.rightTransform)
  _has_bits_[0] &= ~0x00000004u;
  ::Transform* temp = righttransform_;
  righttransform_ = nullptr;
  return temp;
}
inline ::Transform* UpdatePosition::_internal_mutable_righttransform() {
  _has_bits_[0] |= 0x00000004u;
  if (righttransform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Transform>(GetArenaForAllocation());
    righttransform_ = p;
  }
  return righttransform_;
}
inline ::Transform* UpdatePosition::mutable_righttransform() {
  ::Transform* _msg = _internal_mutable_righttransform();
  // @@protoc_insertion_point(field_mutable:UpdatePosition.rightTransform)
  return _msg;
}
inline void UpdatePosition::set_allocated_righttransform(::Transform* righttransform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete righttransform_;
  }
  if (righttransform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Transform>::GetOwningArena(righttransform);
    if (message_arena != submessage_arena) {
      righttransform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttransform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  righttransform_ = righttransform;
  // @@protoc_insertion_point(field_set_allocated:UpdatePosition.rightTransform)
}

// -------------------------------------------------------------------

// StartBeatmap

// string levelId = 1;
inline void StartBeatmap::clear_levelid() {
  levelid_.ClearToEmpty();
}
inline const std::string& StartBeatmap::levelid() const {
  // @@protoc_insertion_point(field_get:StartBeatmap.levelId)
  return _internal_levelid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBeatmap::set_levelid(ArgT0&& arg0, ArgT... args) {
 
 levelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StartBeatmap.levelId)
}
inline std::string* StartBeatmap::mutable_levelid() {
  std::string* _s = _internal_mutable_levelid();
  // @@protoc_insertion_point(field_mutable:StartBeatmap.levelId)
  return _s;
}
inline const std::string& StartBeatmap::_internal_levelid() const {
  return levelid_.Get();
}
inline void StartBeatmap::_internal_set_levelid(const std::string& value) {
  
  levelid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBeatmap::_internal_mutable_levelid() {
  
  return levelid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBeatmap::release_levelid() {
  // @@protoc_insertion_point(field_release:StartBeatmap.levelId)
  return levelid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBeatmap::set_allocated_levelid(std::string* levelid) {
  if (levelid != nullptr) {
    
  } else {
    
  }
  levelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), levelid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (levelid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    levelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StartBeatmap.levelId)
}

// string characteristic = 2;
inline void StartBeatmap::clear_characteristic() {
  characteristic_.ClearToEmpty();
}
inline const std::string& StartBeatmap::characteristic() const {
  // @@protoc_insertion_point(field_get:StartBeatmap.characteristic)
  return _internal_characteristic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBeatmap::set_characteristic(ArgT0&& arg0, ArgT... args) {
 
 characteristic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StartBeatmap.characteristic)
}
inline std::string* StartBeatmap::mutable_characteristic() {
  std::string* _s = _internal_mutable_characteristic();
  // @@protoc_insertion_point(field_mutable:StartBeatmap.characteristic)
  return _s;
}
inline const std::string& StartBeatmap::_internal_characteristic() const {
  return characteristic_.Get();
}
inline void StartBeatmap::_internal_set_characteristic(const std::string& value) {
  
  characteristic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBeatmap::_internal_mutable_characteristic() {
  
  return characteristic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBeatmap::release_characteristic() {
  // @@protoc_insertion_point(field_release:StartBeatmap.characteristic)
  return characteristic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBeatmap::set_allocated_characteristic(std::string* characteristic) {
  if (characteristic != nullptr) {
    
  } else {
    
  }
  characteristic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characteristic,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (characteristic_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    characteristic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StartBeatmap.characteristic)
}

// int32 difficulty = 3;
inline void StartBeatmap::clear_difficulty() {
  difficulty_ = 0;
}
inline int32_t StartBeatmap::_internal_difficulty() const {
  return difficulty_;
}
inline int32_t StartBeatmap::difficulty() const {
  // @@protoc_insertion_point(field_get:StartBeatmap.difficulty)
  return _internal_difficulty();
}
inline void StartBeatmap::_internal_set_difficulty(int32_t value) {
  
  difficulty_ = value;
}
inline void StartBeatmap::set_difficulty(int32_t value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:StartBeatmap.difficulty)
}

// -------------------------------------------------------------------

// StartBeatmapFailure

// string error = 1;
inline void StartBeatmapFailure::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& StartBeatmapFailure::error() const {
  // @@protoc_insertion_point(field_get:StartBeatmapFailure.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBeatmapFailure::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StartBeatmapFailure.error)
}
inline std::string* StartBeatmapFailure::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:StartBeatmapFailure.error)
  return _s;
}
inline const std::string& StartBeatmapFailure::_internal_error() const {
  return error_.Get();
}
inline void StartBeatmapFailure::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBeatmapFailure::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBeatmapFailure::release_error() {
  // @@protoc_insertion_point(field_release:StartBeatmapFailure.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBeatmapFailure::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StartBeatmapFailure.error)
}

// -------------------------------------------------------------------

// ReadyUp

// -------------------------------------------------------------------

// StartMap

// -------------------------------------------------------------------

// ExitMap

// -------------------------------------------------------------------

// PacketWrapper

// uint64 queryResultId = 1;
inline void PacketWrapper::clear_queryresultid() {
  queryresultid_ = uint64_t{0u};
}
inline uint64_t PacketWrapper::_internal_queryresultid() const {
  return queryresultid_;
}
inline uint64_t PacketWrapper::queryresultid() const {
  // @@protoc_insertion_point(field_get:PacketWrapper.queryResultId)
  return _internal_queryresultid();
}
inline void PacketWrapper::_internal_set_queryresultid(uint64_t value) {
  
  queryresultid_ = value;
}
inline void PacketWrapper::set_queryresultid(uint64_t value) {
  _internal_set_queryresultid(value);
  // @@protoc_insertion_point(field_set:PacketWrapper.queryResultId)
}

// .UpdatePosition updatePosition = 2;
inline bool PacketWrapper::_internal_has_updateposition() const {
  return Packet_case() == kUpdatePosition;
}
inline bool PacketWrapper::has_updateposition() const {
  return _internal_has_updateposition();
}
inline void PacketWrapper::set_has_updateposition() {
  _oneof_case_[0] = kUpdatePosition;
}
inline void PacketWrapper::clear_updateposition() {
  if (_internal_has_updateposition()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Packet_.updateposition_;
    }
    clear_has_Packet();
  }
}
inline ::UpdatePosition* PacketWrapper::release_updateposition() {
  // @@protoc_insertion_point(field_release:PacketWrapper.updatePosition)
  if (_internal_has_updateposition()) {
    clear_has_Packet();
      ::UpdatePosition* temp = Packet_.updateposition_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Packet_.updateposition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdatePosition& PacketWrapper::_internal_updateposition() const {
  return _internal_has_updateposition()
      ? *Packet_.updateposition_
      : reinterpret_cast< ::UpdatePosition&>(::_UpdatePosition_default_instance_);
}
inline const ::UpdatePosition& PacketWrapper::updateposition() const {
  // @@protoc_insertion_point(field_get:PacketWrapper.updatePosition)
  return _internal_updateposition();
}
inline ::UpdatePosition* PacketWrapper::unsafe_arena_release_updateposition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketWrapper.updatePosition)
  if (_internal_has_updateposition()) {
    clear_has_Packet();
    ::UpdatePosition* temp = Packet_.updateposition_;
    Packet_.updateposition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_updateposition(::UpdatePosition* updateposition) {
  clear_Packet();
  if (updateposition) {
    set_has_updateposition();
    Packet_.updateposition_ = updateposition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketWrapper.updatePosition)
}
inline ::UpdatePosition* PacketWrapper::_internal_mutable_updateposition() {
  if (!_internal_has_updateposition()) {
    clear_Packet();
    set_has_updateposition();
    Packet_.updateposition_ = CreateMaybeMessage< ::UpdatePosition >(GetArenaForAllocation());
  }
  return Packet_.updateposition_;
}
inline ::UpdatePosition* PacketWrapper::mutable_updateposition() {
  ::UpdatePosition* _msg = _internal_mutable_updateposition();
  // @@protoc_insertion_point(field_mutable:PacketWrapper.updatePosition)
  return _msg;
}

// .StartBeatmap startBeatmap = 3;
inline bool PacketWrapper::_internal_has_startbeatmap() const {
  return Packet_case() == kStartBeatmap;
}
inline bool PacketWrapper::has_startbeatmap() const {
  return _internal_has_startbeatmap();
}
inline void PacketWrapper::set_has_startbeatmap() {
  _oneof_case_[0] = kStartBeatmap;
}
inline void PacketWrapper::clear_startbeatmap() {
  if (_internal_has_startbeatmap()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Packet_.startbeatmap_;
    }
    clear_has_Packet();
  }
}
inline ::StartBeatmap* PacketWrapper::release_startbeatmap() {
  // @@protoc_insertion_point(field_release:PacketWrapper.startBeatmap)
  if (_internal_has_startbeatmap()) {
    clear_has_Packet();
      ::StartBeatmap* temp = Packet_.startbeatmap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Packet_.startbeatmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StartBeatmap& PacketWrapper::_internal_startbeatmap() const {
  return _internal_has_startbeatmap()
      ? *Packet_.startbeatmap_
      : reinterpret_cast< ::StartBeatmap&>(::_StartBeatmap_default_instance_);
}
inline const ::StartBeatmap& PacketWrapper::startbeatmap() const {
  // @@protoc_insertion_point(field_get:PacketWrapper.startBeatmap)
  return _internal_startbeatmap();
}
inline ::StartBeatmap* PacketWrapper::unsafe_arena_release_startbeatmap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketWrapper.startBeatmap)
  if (_internal_has_startbeatmap()) {
    clear_has_Packet();
    ::StartBeatmap* temp = Packet_.startbeatmap_;
    Packet_.startbeatmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_startbeatmap(::StartBeatmap* startbeatmap) {
  clear_Packet();
  if (startbeatmap) {
    set_has_startbeatmap();
    Packet_.startbeatmap_ = startbeatmap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketWrapper.startBeatmap)
}
inline ::StartBeatmap* PacketWrapper::_internal_mutable_startbeatmap() {
  if (!_internal_has_startbeatmap()) {
    clear_Packet();
    set_has_startbeatmap();
    Packet_.startbeatmap_ = CreateMaybeMessage< ::StartBeatmap >(GetArenaForAllocation());
  }
  return Packet_.startbeatmap_;
}
inline ::StartBeatmap* PacketWrapper::mutable_startbeatmap() {
  ::StartBeatmap* _msg = _internal_mutable_startbeatmap();
  // @@protoc_insertion_point(field_mutable:PacketWrapper.startBeatmap)
  return _msg;
}

// .StartBeatmapFailure startBeatmapFailure = 4;
inline bool PacketWrapper::_internal_has_startbeatmapfailure() const {
  return Packet_case() == kStartBeatmapFailure;
}
inline bool PacketWrapper::has_startbeatmapfailure() const {
  return _internal_has_startbeatmapfailure();
}
inline void PacketWrapper::set_has_startbeatmapfailure() {
  _oneof_case_[0] = kStartBeatmapFailure;
}
inline void PacketWrapper::clear_startbeatmapfailure() {
  if (_internal_has_startbeatmapfailure()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Packet_.startbeatmapfailure_;
    }
    clear_has_Packet();
  }
}
inline ::StartBeatmapFailure* PacketWrapper::release_startbeatmapfailure() {
  // @@protoc_insertion_point(field_release:PacketWrapper.startBeatmapFailure)
  if (_internal_has_startbeatmapfailure()) {
    clear_has_Packet();
      ::StartBeatmapFailure* temp = Packet_.startbeatmapfailure_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Packet_.startbeatmapfailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StartBeatmapFailure& PacketWrapper::_internal_startbeatmapfailure() const {
  return _internal_has_startbeatmapfailure()
      ? *Packet_.startbeatmapfailure_
      : reinterpret_cast< ::StartBeatmapFailure&>(::_StartBeatmapFailure_default_instance_);
}
inline const ::StartBeatmapFailure& PacketWrapper::startbeatmapfailure() const {
  // @@protoc_insertion_point(field_get:PacketWrapper.startBeatmapFailure)
  return _internal_startbeatmapfailure();
}
inline ::StartBeatmapFailure* PacketWrapper::unsafe_arena_release_startbeatmapfailure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketWrapper.startBeatmapFailure)
  if (_internal_has_startbeatmapfailure()) {
    clear_has_Packet();
    ::StartBeatmapFailure* temp = Packet_.startbeatmapfailure_;
    Packet_.startbeatmapfailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_startbeatmapfailure(::StartBeatmapFailure* startbeatmapfailure) {
  clear_Packet();
  if (startbeatmapfailure) {
    set_has_startbeatmapfailure();
    Packet_.startbeatmapfailure_ = startbeatmapfailure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketWrapper.startBeatmapFailure)
}
inline ::StartBeatmapFailure* PacketWrapper::_internal_mutable_startbeatmapfailure() {
  if (!_internal_has_startbeatmapfailure()) {
    clear_Packet();
    set_has_startbeatmapfailure();
    Packet_.startbeatmapfailure_ = CreateMaybeMessage< ::StartBeatmapFailure >(GetArenaForAllocation());
  }
  return Packet_.startbeatmapfailure_;
}
inline ::StartBeatmapFailure* PacketWrapper::mutable_startbeatmapfailure() {
  ::StartBeatmapFailure* _msg = _internal_mutable_startbeatmapfailure();
  // @@protoc_insertion_point(field_mutable:PacketWrapper.startBeatmapFailure)
  return _msg;
}

// .ReadyUp readyUp = 5;
inline bool PacketWrapper::_internal_has_readyup() const {
  return Packet_case() == kReadyUp;
}
inline bool PacketWrapper::has_readyup() const {
  return _internal_has_readyup();
}
inline void PacketWrapper::set_has_readyup() {
  _oneof_case_[0] = kReadyUp;
}
inline void PacketWrapper::clear_readyup() {
  if (_internal_has_readyup()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Packet_.readyup_;
    }
    clear_has_Packet();
  }
}
inline ::ReadyUp* PacketWrapper::release_readyup() {
  // @@protoc_insertion_point(field_release:PacketWrapper.readyUp)
  if (_internal_has_readyup()) {
    clear_has_Packet();
      ::ReadyUp* temp = Packet_.readyup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Packet_.readyup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ReadyUp& PacketWrapper::_internal_readyup() const {
  return _internal_has_readyup()
      ? *Packet_.readyup_
      : reinterpret_cast< ::ReadyUp&>(::_ReadyUp_default_instance_);
}
inline const ::ReadyUp& PacketWrapper::readyup() const {
  // @@protoc_insertion_point(field_get:PacketWrapper.readyUp)
  return _internal_readyup();
}
inline ::ReadyUp* PacketWrapper::unsafe_arena_release_readyup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketWrapper.readyUp)
  if (_internal_has_readyup()) {
    clear_has_Packet();
    ::ReadyUp* temp = Packet_.readyup_;
    Packet_.readyup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_readyup(::ReadyUp* readyup) {
  clear_Packet();
  if (readyup) {
    set_has_readyup();
    Packet_.readyup_ = readyup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketWrapper.readyUp)
}
inline ::ReadyUp* PacketWrapper::_internal_mutable_readyup() {
  if (!_internal_has_readyup()) {
    clear_Packet();
    set_has_readyup();
    Packet_.readyup_ = CreateMaybeMessage< ::ReadyUp >(GetArenaForAllocation());
  }
  return Packet_.readyup_;
}
inline ::ReadyUp* PacketWrapper::mutable_readyup() {
  ::ReadyUp* _msg = _internal_mutable_readyup();
  // @@protoc_insertion_point(field_mutable:PacketWrapper.readyUp)
  return _msg;
}

// .StartMap startMap = 6;
inline bool PacketWrapper::_internal_has_startmap() const {
  return Packet_case() == kStartMap;
}
inline bool PacketWrapper::has_startmap() const {
  return _internal_has_startmap();
}
inline void PacketWrapper::set_has_startmap() {
  _oneof_case_[0] = kStartMap;
}
inline void PacketWrapper::clear_startmap() {
  if (_internal_has_startmap()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Packet_.startmap_;
    }
    clear_has_Packet();
  }
}
inline ::StartMap* PacketWrapper::release_startmap() {
  // @@protoc_insertion_point(field_release:PacketWrapper.startMap)
  if (_internal_has_startmap()) {
    clear_has_Packet();
      ::StartMap* temp = Packet_.startmap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Packet_.startmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StartMap& PacketWrapper::_internal_startmap() const {
  return _internal_has_startmap()
      ? *Packet_.startmap_
      : reinterpret_cast< ::StartMap&>(::_StartMap_default_instance_);
}
inline const ::StartMap& PacketWrapper::startmap() const {
  // @@protoc_insertion_point(field_get:PacketWrapper.startMap)
  return _internal_startmap();
}
inline ::StartMap* PacketWrapper::unsafe_arena_release_startmap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketWrapper.startMap)
  if (_internal_has_startmap()) {
    clear_has_Packet();
    ::StartMap* temp = Packet_.startmap_;
    Packet_.startmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_startmap(::StartMap* startmap) {
  clear_Packet();
  if (startmap) {
    set_has_startmap();
    Packet_.startmap_ = startmap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketWrapper.startMap)
}
inline ::StartMap* PacketWrapper::_internal_mutable_startmap() {
  if (!_internal_has_startmap()) {
    clear_Packet();
    set_has_startmap();
    Packet_.startmap_ = CreateMaybeMessage< ::StartMap >(GetArenaForAllocation());
  }
  return Packet_.startmap_;
}
inline ::StartMap* PacketWrapper::mutable_startmap() {
  ::StartMap* _msg = _internal_mutable_startmap();
  // @@protoc_insertion_point(field_mutable:PacketWrapper.startMap)
  return _msg;
}

// .ExitMap exitMap = 7;
inline bool PacketWrapper::_internal_has_exitmap() const {
  return Packet_case() == kExitMap;
}
inline bool PacketWrapper::has_exitmap() const {
  return _internal_has_exitmap();
}
inline void PacketWrapper::set_has_exitmap() {
  _oneof_case_[0] = kExitMap;
}
inline void PacketWrapper::clear_exitmap() {
  if (_internal_has_exitmap()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Packet_.exitmap_;
    }
    clear_has_Packet();
  }
}
inline ::ExitMap* PacketWrapper::release_exitmap() {
  // @@protoc_insertion_point(field_release:PacketWrapper.exitMap)
  if (_internal_has_exitmap()) {
    clear_has_Packet();
      ::ExitMap* temp = Packet_.exitmap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Packet_.exitmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExitMap& PacketWrapper::_internal_exitmap() const {
  return _internal_has_exitmap()
      ? *Packet_.exitmap_
      : reinterpret_cast< ::ExitMap&>(::_ExitMap_default_instance_);
}
inline const ::ExitMap& PacketWrapper::exitmap() const {
  // @@protoc_insertion_point(field_get:PacketWrapper.exitMap)
  return _internal_exitmap();
}
inline ::ExitMap* PacketWrapper::unsafe_arena_release_exitmap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PacketWrapper.exitMap)
  if (_internal_has_exitmap()) {
    clear_has_Packet();
    ::ExitMap* temp = Packet_.exitmap_;
    Packet_.exitmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_exitmap(::ExitMap* exitmap) {
  clear_Packet();
  if (exitmap) {
    set_has_exitmap();
    Packet_.exitmap_ = exitmap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PacketWrapper.exitMap)
}
inline ::ExitMap* PacketWrapper::_internal_mutable_exitmap() {
  if (!_internal_has_exitmap()) {
    clear_Packet();
    set_has_exitmap();
    Packet_.exitmap_ = CreateMaybeMessage< ::ExitMap >(GetArenaForAllocation());
  }
  return Packet_.exitmap_;
}
inline ::ExitMap* PacketWrapper::mutable_exitmap() {
  ::ExitMap* _msg = _internal_mutable_exitmap();
  // @@protoc_insertion_point(field_mutable:PacketWrapper.exitMap)
  return _msg;
}

inline bool PacketWrapper::has_Packet() const {
  return Packet_case() != PACKET_NOT_SET;
}
inline void PacketWrapper::clear_has_Packet() {
  _oneof_case_[0] = PACKET_NOT_SET;
}
inline PacketWrapper::PacketCase PacketWrapper::Packet_case() const {
  return PacketWrapper::PacketCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_live_5fstream_2eproto
